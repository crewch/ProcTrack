// <auto-generated />
using System;
using AuthService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace AuthService.Migrations
{
    [DbContext(typeof(AuthContext))]
    [Migration("20230831144724_11")]
    partial class _11
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("AuthService.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BossId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("AuthService.Models.GroupHoldMapper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("GroupId")
                        .HasColumnType("integer");

                    b.Property<int?>("HoldId")
                        .HasColumnType("integer");

                    b.Property<int?>("StatusBossId")
                        .HasColumnType("integer");

                    b.Property<int?>("StatusMemberId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("HoldId");

                    b.HasIndex("StatusBossId");

                    b.HasIndex("StatusMemberId");

                    b.ToTable("GroupHoldMappers");
                });

            modelBuilder.Entity("AuthService.Models.Hold", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("DestId")
                        .HasColumnType("integer");

                    b.Property<int?>("RightId")
                        .HasColumnType("integer");

                    b.Property<int?>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RightId");

                    b.HasIndex("TypeId");

                    b.ToTable("Holds");
                });

            modelBuilder.Entity("AuthService.Models.Right", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Rights");
                });

            modelBuilder.Entity("AuthService.Models.RightRoleMapper", b =>
                {
                    b.Property<int?>("RightId")
                        .HasColumnType("integer");

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("RightId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RightRoleMappers");
                });

            modelBuilder.Entity("AuthService.Models.RightStatusMapper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("RightId")
                        .HasColumnType("integer");

                    b.Property<int?>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RightId");

                    b.HasIndex("StatusId");

                    b.ToTable("RightStatusMappers");
                });

            modelBuilder.Entity("AuthService.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("AuthService.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("AuthService.Models.Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("AuthService.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LongName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AuthService.Models.UserGroupMapper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("GroupId")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsBoss")
                        .HasColumnType("boolean");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGroupMappers");
                });

            modelBuilder.Entity("AuthService.Models.UserHoldMapper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("HoldId")
                        .HasColumnType("integer");

                    b.Property<int?>("StatusId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("HoldId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("UserHoldMappers");
                });

            modelBuilder.Entity("AuthService.Models.UserRoleMapper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoleMappers");
                });

            modelBuilder.Entity("AuthService.Models.GroupHoldMapper", b =>
                {
                    b.HasOne("AuthService.Models.Group", "Group")
                        .WithMany("GroupHolds")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AuthService.Models.Hold", "Hold")
                        .WithMany("GroupHolds")
                        .HasForeignKey("HoldId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AuthService.Models.Status", "StatusBoss")
                        .WithMany("GroupHoldBoss")
                        .HasForeignKey("StatusBossId");

                    b.HasOne("AuthService.Models.Status", "StatusMember")
                        .WithMany("GroupHoldMember")
                        .HasForeignKey("StatusMemberId");

                    b.Navigation("Group");

                    b.Navigation("Hold");

                    b.Navigation("StatusBoss");

                    b.Navigation("StatusMember");
                });

            modelBuilder.Entity("AuthService.Models.Hold", b =>
                {
                    b.HasOne("AuthService.Models.Right", null)
                        .WithMany("Holds")
                        .HasForeignKey("RightId");

                    b.HasOne("AuthService.Models.Type", "Type")
                        .WithMany("Holds")
                        .HasForeignKey("TypeId");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("AuthService.Models.RightRoleMapper", b =>
                {
                    b.HasOne("AuthService.Models.Right", "Right")
                        .WithMany("RightRole")
                        .HasForeignKey("RightId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("AuthService.Models.Role", "Role")
                        .WithMany("RightRole")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Right");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AuthService.Models.RightStatusMapper", b =>
                {
                    b.HasOne("AuthService.Models.Right", "Right")
                        .WithMany("RightStatus")
                        .HasForeignKey("RightId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AuthService.Models.Status", "Status")
                        .WithMany("RightStatus")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Right");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("AuthService.Models.UserGroupMapper", b =>
                {
                    b.HasOne("AuthService.Models.Group", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AuthService.Models.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuthService.Models.UserHoldMapper", b =>
                {
                    b.HasOne("AuthService.Models.Hold", "Hold")
                        .WithMany("UserHolds")
                        .HasForeignKey("HoldId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AuthService.Models.Status", "Status")
                        .WithMany("UserStatus")
                        .HasForeignKey("StatusId");

                    b.HasOne("AuthService.Models.User", "User")
                        .WithMany("UserHolds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Hold");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuthService.Models.UserRoleMapper", b =>
                {
                    b.HasOne("AuthService.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("AuthService.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuthService.Models.Group", b =>
                {
                    b.Navigation("GroupHolds");

                    b.Navigation("UserGroups");
                });

            modelBuilder.Entity("AuthService.Models.Hold", b =>
                {
                    b.Navigation("GroupHolds");

                    b.Navigation("UserHolds");
                });

            modelBuilder.Entity("AuthService.Models.Right", b =>
                {
                    b.Navigation("Holds");

                    b.Navigation("RightRole");

                    b.Navigation("RightStatus");
                });

            modelBuilder.Entity("AuthService.Models.Role", b =>
                {
                    b.Navigation("RightRole");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("AuthService.Models.Status", b =>
                {
                    b.Navigation("GroupHoldBoss");

                    b.Navigation("GroupHoldMember");

                    b.Navigation("RightStatus");

                    b.Navigation("UserStatus");
                });

            modelBuilder.Entity("AuthService.Models.Type", b =>
                {
                    b.Navigation("Holds");
                });

            modelBuilder.Entity("AuthService.Models.User", b =>
                {
                    b.Navigation("UserGroups");

                    b.Navigation("UserHolds");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
